mod part_1 {
    use super::common::Round;
    use std::ops::Add;

    fn solution(input: &str) -> i32 {
        input
            .lines()
            .map(|line| {
                let mut choices = line.split(' ');
                let theirs = choices.next().unwrap().parse().unwrap();
                let mine = choices.next().unwrap().parse().unwrap();

                Round { theirs, mine }
            })
            .map(|round| round.my_score())
            .fold(0, Add::add)
    }

    const TEST_ANSWER: i32 = 15;
    const FULL_ANSWER: i32 = 15523;

    #[test]
    fn with_test_input() {
        use super::TEST_INPUT;
        assert_eq!(solution(TEST_INPUT), TEST_ANSWER);
    }

    #[test]
    fn with_full_input() {
        use super::FULL_INPUT;
        assert_eq!(solution(FULL_INPUT), FULL_ANSWER);
    }
}

mod part_2 {
    use super::common::Round;
    use std::ops::Add;

    fn solution(input: &str) -> i32 {
        input
            .lines()
            .map(|line| {
                let mut choices = line.split(' ');
                let theirs = choices.next().unwrap().parse().unwrap();
                let outcome = choices.next().unwrap().parse().unwrap();

                Round {
                    theirs,
                    mine: theirs.choice_for_desired_outcome(outcome),
                }
            })
            .map(|round| round.my_score())
            .fold(0, Add::add)
    }

    const TEST_ANSWER: i32 = 12;
    const FULL_ANSWER: i32 = 15702;

    #[test]
    fn with_test_input() {
        use super::TEST_INPUT;
        assert_eq!(solution(TEST_INPUT), TEST_ANSWER);
    }

    #[test]
    fn with_full_input() {
        use super::FULL_INPUT;
        assert_eq!(solution(FULL_INPUT), FULL_ANSWER);
    }
}

mod common {
    use std::str::FromStr;

    #[derive(Clone, Copy)]
    pub struct Round {
        pub theirs: Choice,
        pub mine: Choice,
    }

    impl Round {
        pub fn my_score(self) -> i32 {
            self.mine.outcome_against(self.theirs).value() + self.mine.value()
        }
    }

    pub enum Outcome {
        Win,
        Lose,
        Draw,
    }

    impl Outcome {
        pub fn value(self) -> i32 {
            match self {
                Outcome::Lose => 0,
                Outcome::Draw => 3,
                Outcome::Win => 6,
            }
        }

        /**
         * Int representing the difference between the two choices' int
         * representations
         */
        fn to_int(self) -> u8 {
            match self {
                Outcome::Draw => 0,
                Outcome::Win => 1,
                Outcome::Lose => 2,
            }
        }

        fn from_int(i: u8) -> Self {
            match i % 3 {
                0 => Outcome::Draw,
                1 => Outcome::Win,
                2 => Outcome::Lose,
                _ => unreachable!(),
            }
        }
    }

    impl FromStr for Outcome {
        type Err = ();

        fn from_str(s: &str) -> Result<Self, Self::Err> {
            match s {
                "X" => Ok(Outcome::Lose),
                "Y" => Ok(Outcome::Draw),
                "Z" => Ok(Outcome::Win),
                _ => Err(()),
            }
        }
    }

    #[derive(Clone, Copy)]
    pub enum Choice {
        Rock,
        Paper,
        Scissors,
    }

    impl Choice {
        pub fn value(self) -> i32 {
            self.to_int() as i32 + 1
        }

        pub fn outcome_against(self, other: Choice) -> Outcome {
            Outcome::from_int((self.to_int() + 3) - other.to_int())
        }

        pub fn choice_for_desired_outcome(self, outcome: Outcome) -> Choice {
            Choice::from_int(self.to_int() + outcome.to_int())
        }

        fn to_int(self) -> u8 {
            match self {
                Choice::Rock => 0,
                Choice::Paper => 1,
                Choice::Scissors => 2,
            }
        }

        fn from_int(i: u8) -> Self {
            match i % 3 {
                0 => Choice::Rock,
                1 => Choice::Paper,
                2 => Choice::Scissors,
                _ => unreachable!(),
            }
        }
    }

    impl FromStr for Choice {
        type Err = ();

        fn from_str(s: &str) -> Result<Self, Self::Err> {
            match s {
                "A" => Ok(Choice::Rock),
                "B" => Ok(Choice::Paper),
                "C" => Ok(Choice::Scissors),
                "X" => Ok(Choice::Rock),
                "Y" => Ok(Choice::Paper),
                "Z" => Ok(Choice::Scissors),
                _ => Err(()),
            }
        }
    }
}

const TEST_INPUT: &str = "A Y
B X
C Z";

const FULL_INPUT: &str = "B Z
B Z
C Z
C Z
B X
C Y
A Y
B Z
A Z
A Y
C Z
C X
C Z
C X
B X
B Z
B Z
A Z
C Z
C Z
C Y
C Z
B Z
B Z
A X
A Y
B Z
B Z
C Z
B Z
B Z
C X
C Z
A Y
A X
A X
C Z
C Z
B X
C X
B Z
A Z
B X
B Z
B Z
A Z
B Z
A Y
C Z
C Z
B X
C Z
A Z
C Z
C Z
C Z
C Z
A Z
B Z
C Z
A Z
C Z
C Z
C Y
A Y
C X
C Z
C Z
C Z
C Z
A Y
C X
A Y
A Y
C X
B Z
A Y
C Y
C Z
B Z
C Z
B Z
B Z
B Z
C Y
B Z
A Y
C Z
C Z
A X
C X
C Z
A X
C Z
C Z
C X
A Z
C Z
C Z
B Z
C Y
A Y
C Y
C Y
A Z
B Z
C Z
C Z
C Z
A Z
C Z
B X
C Z
A Y
C Z
C X
C Y
C Y
B Z
C Z
C Z
A X
C X
C Z
C Z
A Z
B Z
B Z
C X
C Z
B Z
C X
B Z
C Z
B Z
B Z
B Z
B Z
C Y
C Z
B Z
C Z
C Z
C Z
C Z
B Z
C Z
B Z
C Z
B Z
C Z
C Y
C Z
C Z
C X
C Z
C Z
C Y
C Z
C Y
C X
B Z
B Z
C Z
A Z
C Z
C Z
C Z
B Z
C Z
B Z
C Z
B Z
C Z
C Z
B X
B Z
C Z
C Z
A Z
A Z
B Z
C Z
C Z
A Z
B X
C X
A Z
C Z
C Z
B Y
B Z
B Z
A Y
B Z
C Z
C Z
A Y
B Z
C Y
A Z
C X
A Z
A Y
C X
C Y
C Z
B Z
C Z
A Y
B Z
B Z
C Z
C Z
C Z
C Z
C Z
B Z
C Z
A X
C Z
C Z
A Y
C Z
A Y
C Z
B Z
C Z
A Y
C Z
C Y
C Z
B Z
C X
A Y
C X
A Y
B X
C Y
B X
C Z
C Y
C Z
C Y
C Y
B Z
C Z
A Y
C X
C Z
C Z
B Z
A Z
C Z
C Z
C Y
C Z
C Y
B X
C Z
C Z
C Z
C X
A Y
B Z
C Z
C Z
C Z
B Z
A Y
A Z
A Y
B Z
A Z
A Y
B Z
C Z
A Y
A Z
B Z
B Z
B Z
C Z
C Z
C Z
C Z
C Z
C Z
B Z
C Z
C Z
C Z
A Z
A Y
C X
C Z
A Z
C Z
A Y
C Z
A Y
C Z
C Z
A X
C Y
C Z
A X
C X
A X
B Z
C Z
A X
C Z
B Z
A X
C Z
A Y
A Z
C Y
A Y
C Y
A Z
B Z
A Z
B Z
C X
C X
C Z
C Z
B Z
A Y
C Z
A Y
C Z
B Z
B X
B X
B X
A Z
B Z
C X
C Z
A Y
C Z
B X
A Y
C X
B Z
C Z
C Z
C Z
C Z
A Z
B Z
B Z
B X
A Y
C Z
C X
A Y
C Z
C Z
C Z
A Y
A X
B Z
C Z
A Z
C Y
A Z
B Z
A Y
C Z
C Z
B Z
A Y
B Z
A Z
A Y
C Z
A X
C Z
C Z
B Z
C Z
C X
A Y
A Y
B Z
C Z
B X
A Y
C Z
C Z
A X
A Z
C Z
C Z
A Y
C Z
C Y
A Y
A Y
B Z
C Z
C Z
C X
C Z
A Y
B Z
C Z
C Z
A Y
B Z
C Z
C Z
B Z
A Y
B Z
C Z
C Z
C Z
C X
C Z
C Z
C Z
C Y
C X
C Y
C Z
B Z
A Y
C X
B Z
C X
C X
C Z
A Z
C Z
B X
A Y
C Z
B Z
A X
B X
C X
C Z
C Z
B Z
B Z
C Z
C Z
A Y
B Z
A Z
B Z
A Z
A X
C Z
A Z
A Z
B X
A Z
B Z
B Z
A Y
C Y
B Z
B Z
B Z
B Z
C Z
B Z
C Z
B Z
C Y
C Z
C Z
C X
C Z
C Y
C Y
C X
A Y
C Y
B Z
C Z
A Y
A Z
B X
C Z
C Z
A Y
A Y
A Y
C Z
A Z
C Z
B Y
A X
A Y
C Z
A X
B Z
C Z
C Z
B Z
C Z
A Z
C X
C Z
B Z
B Z
C Z
B Z
A Z
C Z
C Z
A Y
B Z
A Y
B Z
C Z
B Z
C Z
B Z
B Z
A Y
C Y
B Z
C Z
A Z
B Z
C Z
C Z
A Z
B Z
C Z
A Y
A Z
C X
B Z
A Y
A Y
C Z
A Z
B Z
B Z
C Z
C Z
C Z
C Z
A Y
A X
C Z
B Z
C Z
C Z
C Y
C Z
A X
A Z
C Z
B X
A Z
B X
B X
A Y
A Y
A Y
C Z
C Z
C Z
A Z
C X
A Y
C Z
B Z
C Z
A X
B Z
A X
A Z
C Z
C Z
C Z
B X
B Z
C X
B Z
C Z
C Z
C Z
A Y
B Z
B Z
C Z
A X
B Z
A Y
C Z
A Y
A Y
C Z
C Z
A Y
C X
C Z
A Y
C Z
B Z
B Z
C Z
C Y
B Z
B Z
C Z
A Y
C Z
B Z
B X
A Y
A Z
C Z
B Z
C Z
C X
A Y
A Z
A Y
B Z
A Z
B Z
A Y
A Y
B Z
C Z
C Z
C Z
A Y
A X
B Z
A Y
C Z
B X
C Z
C Z
A Y
C Z
C Z
C Y
C Z
C Y
B Z
B Z
C Z
C Z
B Z
B Z
B Z
C Z
B Z
B Z
C Z
C Z
C X
C Z
C Z
B Z
B Z
C X
A Y
C Y
C X
B Z
C X
B Z
C Z
A Z
C Y
C Z
C X
B X
A Y
C Y
A X
C Z
C Z
C Z
C Z
A Y
C Y
C Z
A Y
C Z
C Z
B Z
B Z
B Z
C Z
C Z
C Z
C Z
C Z
C Z
B Z
C Z
B Z
C Z
B Z
C Z
C Z
B Z
C Z
C Z
C Z
A Y
C Z
C Z
A X
C Z
C Z
A X
B Z
C Z
A Y
C X
C Z
A Z
C Y
A Y
C Z
B Z
C Z
B Z
C X
C Y
B Z
C Z
C Z
A Y
C X
C Z
C Z
B X
C Z
C Z
C Z
C Z
A Z
A Y
C Z
B Z
C Z
B Z
A Y
B Z
C Z
B Z
B Y
C Z
B Z
A Y
C Z
C Y
C Z
A X
B Z
C Z
A Z
A Z
B Z
A X
B Z
B Z
C Y
C Z
C Z
B Y
B Z
C Z
A Y
B X
B Z
C Z
C Z
C Z
B X
A Y
A Y
B Z
B Z
C Z
B Z
C Z
C Y
B Z
B Z
B X
A Y
A Y
A Y
B X
C Z
C Z
B Z
C Z
C X
B Z
C Z
C Z
B Z
C Z
C Z
A Y
B Z
A Y
C Y
B Z
B Z
B Z
C X
C Z
C Z
C Z
C X
C Z
A X
B Z
C Z
C Z
A Y
B Z
C Z
A Y
C Z
B Z
C Z
C Z
B Z
B Z
C Z
C Z
C Y
C Z
C Y
C X
C Z
C Y
C Z
A Y
B Z
B Z
A Y
B Z
B X
B X
A Z
C Y
C Z
C Z
B Z
C Z
C Z
C Z
C Z
C Y
C Z
B Z
C Z
C Z
C Z
B Z
B Z
C Z
B X
C Y
A X
C Z
A Z
C Y
C Z
C Z
B Z
C Z
C Z
C Z
B Z
A Y
A Z
B X
C X
A Y
A Y
C Z
C Z
C Z
C Z
C Z
C Z
C Y
C Z
C Z
C Z
A Y
A Z
C Z
A Y
C Z
C Z
B Z
B Z
B X
A Y
B Z
C Y
C Z
B Z
A Z
A Y
A X
C Z
B Z
C Z
B Z
B Z
C Z
C Z
C Z
C Z
A Y
A Z
C Z
C Z
A Y
C Y
C Z
A X
B X
B X
C Z
C Z
B Z
A Y
A Y
A Y
A X
C Z
B Z
B Z
B Z
A Y
C Y
B Z
A Z
C Z
B X
C Z
C Z
C X
C X
C Z
A Y
B Z
C Z
A Y
C Z
A X
C Z
B Z
B Z
B Z
C Z
B Z
C Z
A Z
C Z
B Z
C Z
A Y
C Z
A Z
C Z
C Y
B Z
A Z
C Z
B Y
A Z
C Z
A X
C Z
B Z
A X
C Z
B Z
C Z
C X
A Y
C Z
B Z
A X
C Z
B Z
C Z
A Y
C Z
C Z
C Z
B Z
C Y
C Z
C X
A Z
C Z
C Z
B Z
C Z
C Z
C Z
A Z
C Z
A Y
A X
C Z
A Y
C X
C Z
B Z
C Z
B Z
B Z
A Y
B Z
A Y
A Y
C X
B Z
C Z
C Z
C Z
C Z
C Z
A Y
B Z
C Z
A Y
B Z
C Z
C Z
A Y
B Z
C Z
C Y
B Z
C Z
B Z
A Z
C X
B Z
C Y
C Z
C Z
C X
C X
A X
C Z
B Z
A Z
C Z
B Z
B X
C Z
C Z
C Z
C Z
B Z
B X
C Z
C Z
C Z
B Z
C Y
B Z
B X
C Y
C Z
C Z
B Z
A Z
C Y
C X
C Z
B Z
C Z
C Z
C Z
B Z
B X
C Z
C Z
A Y
C Z
C Y
A Y
A Z
B Y
C Z
A Y
C X
C X
C X
C Z
B Z
C Z
C Z
B Z
C Z
A Y
C Z
C Z
B Z
C X
C Z
B Z
C Z
A Y
C Z
C Z
C X
C Z
B Z
C Y
C Z
A Z
C Z
B Z
A Z
B Z
C Z
A Y
B Z
C Z
C Z
B Z
A Z
C Z
C X
C Z
C Z
A Y
A Y
A Z
C Z
A Y
A X
C Z
C Z
C Z
C X
A Z
C Z
A Y
C Z
C Z
C Y
C Z
C Z
B Z
C Z
C Z
B Z
B Z
C Z
C Z
C Z
B Z
C Z
C Z
C Y
B Z
C Y
B Z
B X
C Z
C Z
A Y
B Z
C Y
B Z
B Z
B Z
B Z
C Z
C Y
A X
C Z
C Z
C Z
C Z
C Z
B Z
C Z
A Y
C Z
C Z
A Y
A Y
C Z
C Z
B Z
B Z
C X
C Z
C Z
A X
C Z
C Y
C Z
B Z
C Z
A Y
C Z
C Z
C Z
C X
A Y
C Z
C X
B Z
C Z
C Z
C Y
C Z
A Y
B Z
B Z
A X
C Y
C Z
B X
A X
C Z
C Z
C Z
C Z
C Y
A X
B Z
C Z
C Z
A Y
B X
A Z
A Y
B Z
C Z
C X
A X
C X
C Y
C Z
B X
A X
C Z
C Z
B X
A Y
A Y
A Y
C Z
C Z
A Y
C Z
A Z
A Y
C Z
B X
C Z
C Z
C X
C Z
C Z
A Z
B Z
A Z
C Y
C Y
C Y
C Z
C X
C Z
A Y
B Z
C Z
B Z
C Z
A Y
C X
C Z
C Z
B Z
C Z
C Y
A Y
B Z
B Z
B X
B Z
C Z
A Y
C Z
B Z
A Y
C Z
C Z
B Z
A Y
C Z
C Z
C Z
C Z
A Z
A Y
C Z
C X
A Z
A Z
C Z
C Z
C Z
A Y
B Z
B Z
B Z
B Z
C Z
C X
C Z
C Z
B Z
B Z
C Z
C X
A Z
A Y
C Z
B Z
C X
C X
A Y
A Y
C Z
B X
C Z
C Y
C X
A Y
C Y
C Z
C Z
B Z
A Z
C Z
C Z
C Z
C X
C Z
B Z
A Y
C Z
B Z
C Z
A Y
A Y
B X
B X
B Z
C Z
C Z
C Z
C Z
C X
C Z
B Z
C X
C X
A Z
B Y
C Z
C Z
C X
B Z
C Z
C Z
A Z
C Z
C X
A Y
A Z
C Z
B Z
C Z
B X
A Y
C Z
C Z
B Z
C X
B Z
B Z
C Z
C Z
C Z
B Z
A Z
C Z
A X
C Z
C Z
C Z
C X
C X
B Z
C Y
C Z
C Y
A Z
A Y
A X
B Z
A Y
C Z
C Y
B Z
B Z
B Z
B Y
B Z
A X
C Z
A Y
B Z
A Y
C Z
C Z
C Z
A Y
C Z
B Z
C Z
A Z
C Y
C X
A Y
A Y
A Y
B Z
C Y
C Z
C Z
C X
B Z
A Y
C Z
C Z
B Z
A Z
C Z
B Z
C X
C Z
B Z
C Z
C Z
B Y
B Z
C Y
B Z
A X
C Y
B Z
C Z
A Y
C Z
A Z
C Z
B Z
A X
C Y
C Y
A Y
A Z
B Z
A Z
C Z
C Y
C X
C Z
A Y
C Z
A Y
C Z
C Z
C Z
C Y
C X
C X
B Z
A Y
C Z
A X
C Z
A Z
C X
A X
A Z
A Y
C Z
C Z
C Z
B Z
B Z
C Z
C Z
C Z
A Y
C Z
A Z
C Z
C Z
C X
C X
C Z
C Z
C Z
C Z
C Z
A Y
B Z
B Z
C Z
B X
C Y
C Z
C Z
C Z
A Y
B X
C Z
C X
B Z
A Z
B X
C Z
C Z
B Z
C X
B Z
C Z
A Y
C X
A Y
A Z
C Y
C Z
C Y
C Z
C X
C Z
C Z
C Z
C Z
C Z
C Z
B Z
C Z
B Z
C X
C Z
C X
B Z
A Z
A X
C Z
A Y
C Y
C Z
C Z
C Z
B Z
B Z
A X
C Z
B Z
C Z
C Z
A X
C Z
B Z
C X
C Z
C Z
C Z
C Z
B X
C X
B Z
C Z
B Z
A Y
C Z
A Y
B X
C Z
C Z
C Z
C Z
A Y
C Z
C Z
B Z
C Z
C Z
B Z
A Y
C X
C Z
C Z
A Y
C X
B Z
B Z
A Y
C Z
B Z
C Z
A Y
B Z
A Z
C Z
B Z
C Z
B Z
C X
B Z
C Z
C Z
C Z
A Y
A Y
C Z
B Z
A Y
B X
C Z
B Z
C X
C Z
B Z
B Z
C Y
C Y
A Z
C X
C Z
B Z
A Y
C Z
C Z
B Z
A Y
B Z
A Z
C Z
B Z
B Z
B Z
C Z
C X
B Z
C Z
B Z
C Z
C Z
A Y
A Y
C Z
C X
A Y
B Z
C Z
A Z
C Z
B Z
A Y
C Z
C X
C Z
C Z
C Z
C Z
A Y
C Z
C X
B Z
B X
C Z
A Y
C Y
C Z
C Z
C X
C Z
C X
C X
C Z
B Z
B X
A Z
A Z
C Z
C Y
A Y
C Z
A Y
C Z
C Z
C Z
B Z
B Z
C Z
B Z
C Z
C Z
C Y
B Z
B Z
C Z
C Z
B Z
C X
A Z
C Z
C Z
A Y
A Y
A Y
C Z
C Z
B Z
A Z
A X
A Y
C X
C Z
B Z
C X
C X
B Z
B Z
B X
C Z
C Y
B Y
C Z
C Z
C Z
B Y
A Y
A Y
C Z
C Z
C Z
C Z
C Z
C Z
C Z
C Z
B X
A Z
A X
C Z
A Y
A Z
C X
C Z
C Y
C Z
C Z
C Z
B Z
B Z
A Y
A Z
C X
B X
B X
C Z
C Y
C Z
C Z
C Y
C Z
C Z
A Z
B Z
C Z
A Y
C Z
C Z
C Z
A Y
C Z
B Y
B X
C Z
A Y
B X
C Y
A Y
C Z
C Z
C Y
A Z
B Z
C Z
C Z
B Z
C Y
C X
C Y
C Y
B Z
C Z
B Z
C Z
A Y
A Y
A Y
B Z
C Z
A Z
C Z
C Y
B Z
B Z
C Y
C Z
C Z
A Y
C Z
C Z
B Z
C Z
C X
A X
A Y
A Y
B Z
C Z
B X
A Y
B Z
C Z
C Z
B Z
A Y
C Z
C Z
B X
A Y
C Z
B X
A Y
C Z
C X
A Z
B Z
B Z
C Z
C X
A Y
C Z
C Z
A Y
B Z
C Z
A Y
C Z
A Y
C Z
B Z
C Z
A X
B Z
C Z
C Z
C X
B Y
A Y
A X
C X
B Z
C Z
C X
B Z
C Z
C Z
C Z
C Z
A Z
C Z
A Y
B X
C Z
C Z
B Z
B Z
C X
B Z
B X
C Z
C Z
C Z
A Y
C Z
C Z
C Z
C Z
A Y
A Z
B Z
C Y
A Z
C Z
C Z
C Z
B X
B Z
C Z
B Z
C Z
C X
C Z
A X
C Z
C Z
C Z
C Z
C Z
A Y
A Y
B Z
B Z
B Z
B Z
C Z
C Z
C Z
C Z
A Z
A Y
C Z
A Z
A Y
C Z
C Z
C Y
A Y
B Z
C X
B Z
A Y
C Z
A Y
C Z
B Z
B Z
B Z
C Z
C Z
A Z
A Y
C X
A Y
C Z
A Y
C Z
C Z
A Y
B Z
C Z
C Y
C Z
B Z
B Z
B Z
C Y
C Z
B Z
C X
B Z
A Y
B Z
C Z
A Y
C Z
C Y
C Z
C Z
C Z
C Z
B X
B Z
C Z
C Z
A Y
C Y
C Z
C Z
C Z
C Z
C Z
C X
B Z
C X
A Y
B X
A Y
C Z
B Z
A Y
B Z
C Z
A Y
C Z
C Z
C X
C X
C Z
B Z
C X
C Z
A X
A Z
C Z
C Y
A Y
A X
B Z
C Z
C Z
B Z
A Y
C Z
A X
B Z
B Z
A X
C Y
C Z
A Y
B Z
C Z
C Z
C Z
B Z
C Z
B Z
C Z
B X
B Z
C Z
A X
C Z
A X
C Z
A Y
C Z
A Z
C Z
C Z
C Z
B X
A Y
A Y
A X
B Z
B Z
C Y
C Z
B Z
A X
C Z
A Y
C Z
C Z
B Z
C Z
C X
B X
B Z
B X
C Z
C Z
B Z
A Z
C Z
C Y
C Y
C Z
C Z
C Z
C Z
C Z
C Z
A X
A Z
C Z
B Z
B Z
B Z
C X
A Z
C Z
C Z
B Z
B Z
C Z
B X
C Z
B Z
C Z
C Z
C Z
C Z
A X
A Z
A Y
C Z
A Z
A Y
C Z
A Z
C Z
A Y
C Z
B Z
C Z
A Y
C Y
A Y
B Z
A Y
B Z
C Z
B X
C X
C Z
B Z
A Z
C Z
B X
C Y
C Z
C Y
A X
C X
C X
B Z
A Y
C Z
A Z
B Z
C Z
C X
C Z
C Z
C Z
C Z
C Z
B Z
B Z
C Z
C Z
C Z
C Z
C X
A Z
C Z
A Y
A Y
C Z
C Z
C Y
C Z
A Y
C Z
B Z
B X
A Z
A Y
A Y
C Z
A Y
C Z
A X
A Y
B X
C Z
C Z
A Z
C Z
A Y
B Z
A Y
C Z
C Z
B Z
C X
C Z
C Z
C Z
C Y
C Z
B X
C Z
C Z
B X
A Z
C Z
C X
C X
B Z
C Z
C Z
B Z
C Z
C Z
B Z
B Z
B Z
B Z
B Z
A Z
C X
C Y
C Z
A Y
C Z
B Z
A Y
C Z
C Z
B Z
B Z
C Z
A Z
A X
A Y
C Z
A Z
C Z
C X
B Z
C Z
A X
B Z
B X
C Z
C Z
C Z
B X
C Z
B Z
B Z
A Y
A Y
A Z
C Z
C Z
C Z
B Z
C Z
B Z
C Z
A Z
C Z
C X
C Z
C Z
C Z
B Z
A Y
C Y
C Z
C Z
C Z
C Z
B Z
C Y
C Z
A Z
C Y
C Z
B X
A Y
A Y
A X
B Z
B Z
C Z
A Y
B X
A Y
C X
C Z
A Y
C X
C Z
C Z
A Z
C X
C Z
C X
C Z
A Y
C Z
C Z
B Z
C Z
C Y
A Z
C X
C Y
C Z
C Z
C Y
B Z
B Z
C X
C Z
C Z
C Z
C Z
B Z
C Z
C Z
C Z
B Y
C Y
C Z
B Z
C Z
C Z
C Y
B Z
A Y
A Z
C Y
C Y
C Z
C X
C Z
A Z
C Z
C Z
A Y
A Z
C Z
A Z
C Z
B Z
B X
B Z
B Z
A Z
C Z
A Y
C Z
C Y
C Z
A Z
B Z
B Z
B Z
C Z
B Z
A Z
A Y
C Z
C Z
C Z
C Z
C Z
A Z
C Z
A Z
A X
B Z
A Y
C X
A Z
B X
B Y
A Y
B Z
A Z
B Z
B Z
C Z
A Z
B Z
B Z
A Y
C Y
C Y
A X
C Z
C Z
C Z
C X
C Z
C Z
C Z
C Z
B Z
A Y
C Z
C Z
C Z
A Z
C X
C Z
B Z
C Y
B X
B Y
C Z
C Z
A X
C Y
C X
B Z
B Z
C Z
B Z
C Y
C Y
C Y
C X
C Z
C Z
C Z
C X
A Y
C Z
C Z
B Z
A Z
C Z
A Y
B X
C Z
C X
C Z
A Z
B Z
A Y
C Z
C Z
C Z
A Z
C Z
C Z
C X
C Z
C Z
B Z
C Z
B Z
C X
C Z
A Y
A Y
C Z
C Z
B Z
C Z
C Z
C X
C Z
A Y
C Z
C Z
C Z
B Z
C Z
A Y";
